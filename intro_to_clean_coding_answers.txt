1. In your own words, explain what clean code is and why it is important.

	Clean code is code that is easily understood by multiple people, that is written according to best practices and not marked heavily with comments.  Clean code is exceptionally important, especially when working with teams to be efficient.

2.Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

	I feel like the most obvious and potentially dangerous industry would be the medical field - between vital monitors, robot-assisted surgeries, and medication distribution.  There's so many commonly used objects in that field that are used daily; if the code were not up to par, it could easily result in injury and death.  

3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (xâˆ’32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

	No, I would not consider this code to be clean; the comments are excessive and the name is unclear.

	FUNCTION convertTemperature(temp1, temp2)
	  IF temp2 ="Farenheit" THEN
	    SET convertedTemp to (temp1 - 32) * (5/9)
	    PRINT convertedTemp
	  ELSE IF temp2 = "Celsius" THEN
	    SET convertedTemp to (temp1 * 1.8) + 32
	    PRINT convertedTemp
	  ENDIF
	END FUNCTION

4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

	Yes, I would consider this code clean; it is easily understood, the name is self-explanatory, it's not difficult visually to process.

5a. 

FUNCTION checkOut(subTotal, discountRate, paymentType)
	SET total to subTotal * discountRate + (subTotal + tax)
   	
   	PRINT "Your total due is: " + Total 

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - total 

   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + total
   END IF
END FUNCTION

5b.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive AND IF NOT(guest.hasOverdueBooks) AND guest.outstandingFees = 0 THEN
        APPEND book to guest.books
        SET book.status to "Checked Out"
        PRINT "Your books have been issued."
    END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

5c.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION
END


CLASS Customer

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

END

6. Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum

	function Square(array) {
		let sum = 0;
			for (let i = 0; i < array.length; i++) {
				sum += array[i];
			}
			if (Math.sqrt(sum) % 1 === 0) {
				return(Math.sqrt(sum));
				} else {
					return sum;
				}
			}

7.  Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

	function Duplicate(array) {
		for (let i = 0; i < array.length; i++) {
			for (let j = i + 1; j <array.length; j++) {
				if(array[i] == array[j]) {
					return true;
				} else {
					return false;
				}
			}
		}
	}
